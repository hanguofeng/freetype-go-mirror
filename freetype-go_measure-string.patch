diff -r 15b6d4e04151 freetype/freetype.go
--- a/freetype/freetype.go	Wed Jul 25 22:10:25 2012 +1000
+++ b/freetype/freetype.go	Sun Dec 16 00:43:55 2012 -0500
@@ -13,8 +13,8 @@
 	"image"
 	"image/draw"
 
-	"code.google.com/p/freetype-go/freetype/raster"
-	"code.google.com/p/freetype-go/freetype/truetype"
+	"code.google.com/p/jamslam-freetype-go/freetype/raster"
+	"code.google.com/p/jamslam-freetype-go/freetype/truetype"
 )
 
 // These constants determine the size of the glyph cache. The cache is keyed
@@ -53,6 +53,11 @@
 	}
 }
 
+// Pixel converts from raster.Fix32 units to pixels.
+func Pixel(r raster.Fix32) int {
+	return int(r / 256)
+}
+
 // A Context holds the state for drawing text in a given font and size.
 type Context struct {
 	r        *raster.Rasterizer
@@ -216,6 +221,57 @@
 	return p, nil
 }
 
+// MeasureString returns the width and height of the string in s, in terms of
+// raster.Fix32 units.
+//
+// BUG(burntsushi): I don't think negative x-coordinates are handled at all, so
+// that the bounding box could be smaller than what it actually is. (i.e., the
+// first letter is an italic 'J'.)
+func (c *Context) MeasureString(s string) (raster.Fix32, raster.Fix32, error) {
+	if c.font == nil {
+		return 0, 0, errors.New("freetype: DrawText called with a nil font")
+	}
+
+	var width, height, heightMax raster.Fix32
+	oneLine := c.PointToFix32(c.fontSize)&0xff
+	height = c.PointToFix32(c.fontSize)
+	prev, hasPrev := truetype.Index(0), false
+	for _, rune := range s {
+		index := c.font.Index(rune)
+		if hasPrev {
+			width += raster.Fix32(c.font.Kerning(c.scale, prev, index)) << 2
+		}
+
+		if err := c.glyphBuf.Load(c.font, c.scale, index, nil); err != nil {
+			return 0, 0, err
+		}
+		ymax := oneLine-raster.Fix32(c.glyphBuf.B.YMin<<2)+0xff
+		heightMax = max(heightMax, ymax)
+
+		width += raster.Fix32(c.font.HMetric(c.scale, index).AdvanceWidth) << 2
+		prev, hasPrev = index, true
+	}
+
+	if heightMax > 0 {
+		height += heightMax
+	}
+	return width, height, nil
+}
+
+func max(a, b raster.Fix32) raster.Fix32 {
+	if a > b {
+		return a
+	}
+	return b
+}
+
+func min(a, b raster.Fix32) raster.Fix32 {
+	if a < b {
+		return a
+	}
+	return b
+}
+
 // recalc recalculates scale and bounds values from the font size, screen
 // resolution and font metrics, and invalidates the glyph cache.
 func (c *Context) recalc() {
